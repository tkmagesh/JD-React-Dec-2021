

About You
    Name
    Total Experience
    Primary Skillset
    Experience in React (if any)

Schedule:
    Commence    : 10:00 Hrs
    Tea break   : 11:30 Hrs (20 mins)
    Lunch break : 13:30 Hrs (1 hr)
    Tea break   : 16:00 Hrs (20 mins)
    Wind up     : 18:00 Hrs

Methodolgy:
    - No powerpoints
    - 100% hands on driven

Code: 
    http://github.com/tkmagesh/jd-react-dec-2021

    http://collabedit.com/5xrx8

Requirements:
    Visual Studio Code
    Node.js
    Chrome Browser

What is React?
    1. Javascript framework for rendering UI components in the browser
    2. It is a library for rendering UI components
    3. Used to develop Single Page Applications

    Rich Internet Applications
        Web Application offering the user experience of a Desktop Application
        Application runs on the browser handling the following responsibilities
            1. Decisions based on user interaction      (controller)
            2. Generate HTML to be shown to the user    (view)
            3. Manage application state                 (model)

Problem Statement:
    Salary Calculator - Helps the user in calculating his/her salary
        salary = basic + hra + da - tax

    Assumptions
        1. The application meets 100% of the function requirements
            a. No validation are needed
        2. preparing the application for deployment is taken care by another team
            a. another team will take care of moving the javascript code into a separate JS file, styles to separate CSS file and images to separate folder

Reactive X Proactive
    (Dumb)    (knowledge)

View Sync Strategy
    1. Incremental
        Update the individual DOM nodes based on the state changes

    2. All In One approach
        Recreate the whole DOM fragment (with the lateset model data) for EVERY state change 


HTML Vs JSX
HTML
    1. Open tags without close tags are allowed
    2. 'for' attribute is allowed
    3. 'class' attribute is allowed

JSX
    1. Every open tag must have the corresponding close tag
    2. Use 'htmlFor' in place of 'for' attribute
    3. Use 'className' in place of 'class' attribute
    

Encapsulate Presentation + State + UI Behavior => Component

Day-01 Assignment
    Study the following methods of the 'Array' in javascript
        1. forEach
        2. filter
        3. map
        4. reduce

Day-02
    Components
        Presentations
        Accept User Inputs
        React to user actions
        Manage State
        Component Composition
        Component Lifecycle
    
Convert the following into a 'Greeter' component
    <h1>Greeter</h1>
    <hr>
    <label for="">User Name :</label>
    <input type="text" name="" id=""/>
    <button>Greet</button>
    <div class="highlight">[message]</div>

Expected outcome:
    Hi [User Name], Have a nice day!

Assignment:
Calculator-1
    <h1>Calculator-1</h1>
    <hr>
    <input type="number" name="" id="">
    <input type="number" name="" id="">
    <br>
    <button>Add</button>
    <button>Subtract</button>
    <button>Multiply</button>
    <button>Divide</button>
    <div>[Result]</div>

Calculator-2
    <h1>Calculator-2</h1>
    <hr>
    <input type="number" name="" id="">
    <select name="" id="">
        <option value="">---Select---</option>
        <option value="add">Add</option>
        <option value="subtract">Subtract</option>
        <option value="multiply">Multiply</option>
        <option value="divide">Divide</option>
    </select>
    <input type="number" name="" id="">
    <button>Calculate</button>
    <div>[Result]</div>

Assignment:
    Build the salary calculator using React

Day-03
    Functional Components
        React Hooks
    State Management

Functional Components:
    functions that can be used as components
        Advantages
            No instances of the components are created
            No unnecessary lifecycle event executions
Assignment:
    Convert the components in 08-salary-calculator-composition.html into functional components

React Hooks
    Functions used to manage side effects in functional components
    Hook function names must start with the word 'use'
    Builtin hooks
        - useState
        - useEffect
        - useReducer
        - useCallback
        - useMemo
        - useRef
        - useContext

Assignment:
    Convert the Greeter, Products components to functional components

State
    UI State
        Any data that supports the 'presentational' needs of the component
        It is highly UNLIKELY that this data might be needed in other parts of the application
        Feel free to maintain this data in the component state

    App State
        Any data that supports the 'core business' of the application
        It is highly LIKELY that this data might be needed in other parts of the application
        DO NOT maintain this data in the component state
        

Bug tracker
    (done) 1. Create new bugs
    (done) 2. List the created bugs
    (done) 3. Toggle the 'closed' status of any bug
    (done) 4. Remove any bug
    (done) 5. Remove closed bugs
    (done) 6. Display stats ( # of closed bugs / total # of bugs )
    7. Sort the bugs (assignment)
    8. Associate the bug with a project (multiple reducers)
    9. Persist the bugs in the server (middlewares, promises, async await, axios)
    10. Make the bugs accessible using unique endpoints (router)
    11. Package and deployment 


npx create-react-app bug-tracker-app

yarn create  react-app  bug-tracker-app

ES6 modules
    1. Everything defined in a JS/JSX file is considered private to that file
    2. Public entities have to be explicitly 'exported'
    3. Public entities from other files have to be explicitly 'imported' in order to use them

/src
    /bugs
        /actions
            -addNew.js
            -toggle.js
            -remove.js
            -removeClosed.js
            *index.js
        /reducers
            -bugsReducer.js
        /components
            -bugStats.jsx
            -bugSort.jsx
            -bugEdit.jsx
            -bugItem.jsx
            -bugList.jsx
        *index.js => Bugs component
    /store
        *index.js
    

To install redux
    npm install redux
        OR
    yarn add redux

Projects
    - Adding & Listing Projects
    project (id & name)

npm install yarn -g

cd bug-tracker-app
yarn